package Window;

import java.util.HashMap;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.KeyEvent;
import org.eclipse.swt.events.KeyListener;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseMoveListener;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.widgets.Composite;

import Builder.MouseControlMode;
import Builder.MouseControlMode.MouseControlModeT;
import Notification.ILDrawSubscriber;
import Notification.INotificationMessage;
import Notification.NotificationCenter;
import Notification.NotificationMessageT;
import OtherTools.Syringe;
import Resource.ResourceManager;

public class EventHandlerForCursor implements KeyListener, MouseMoveListener,
		ILDrawSubscriber {
	private static final String DefaultResourcePath = "/Resource/Image/";
	private Composite parent;

	private HashMap<CursorT, Cursor> cursorMap;

	enum CursorT {
		Default, Syringe, Selectable, Stamp, CameraMove, CameraRotate
	};

	public EventHandlerForCursor(Composite parent) {
		this.parent = parent;
		cursorMap = new HashMap<CursorT, Cursor>();

		loadCursorImage();

		NotificationCenter.getInstance().addSubscriber(this,
				NotificationMessageT.MouseControlModeChanged);
	}

	private void loadCursorImage() {
		cursorMap.put(
				CursorT.Syringe,
				new Cursor(parent.getDisplay(),
						ResourceManager
								.getInstance()
								.getImage(
										parent.getDisplay(),
										DefaultResourcePath
												+ "active_colordropper.png")
								.getImageData(), 0, 0));
		cursorMap.put(
				CursorT.Stamp,
				new Cursor(parent.getDisplay(), ResourceManager
						.getInstance()
						.getImage(parent.getDisplay(),
								DefaultResourcePath + "stamp.png")
						.getImageData(), 0, 0));
		cursorMap.put(
				CursorT.CameraMove,
				new Cursor(parent.getDisplay(), ResourceManager
						.getInstance()
						.getImage(parent.getDisplay(),
								DefaultResourcePath + "cameraMove.png")
						.getImageData(), 0, 0));
		cursorMap.put(
				CursorT.CameraRotate,
				new Cursor(parent.getDisplay(), ResourceManager
						.getInstance()
						.getImage(parent.getDisplay(),
								DefaultResourcePath + "cameraRotate.png")
						.getImageData(), 0, 0));
	}

	@Override
	public void mouseMove(MouseEvent arg0) {
		updateCursor();
	}

	@Override
	public void keyReleased(KeyEvent arg0) {
		if ((arg0.stateMask & SWT.SHIFT) != 0 && arg0.keyCode == SWT.SHIFT) {
			if ((arg0.stateMask & SWT.CTRL) == 0)
				MouseControlMode.setCurrentMode(MouseControlModeT.Seletion);
		} else if ((arg0.stateMask & SWT.CTRL) != 0 && arg0.keyCode == SWT.CTRL) {
			if ((arg0.stateMask & SWT.SHIFT) == 0)
				MouseControlMode.setCurrentMode(MouseControlModeT.Seletion);
		}

		if ((arg0.stateMask & (SWT.SHIFT | SWT.CTRL)) == 0)
			MouseControlMode.setCurrentMode(MouseControlModeT.Seletion);
	}

	@Override
	public void keyPressed(KeyEvent arg0) {
		if (arg0.keyCode == SWT.SHIFT && (arg0.stateMask & SWT.CTRL) == 0)
			MouseControlMode.setCurrentMode(MouseControlModeT.MoveCamera);
		else if (arg0.keyCode == SWT.CTRL && (arg0.stateMask & SWT.SHIFT) == 0)
			MouseControlMode.setCurrentMode(MouseControlModeT.RotateCamera);
	}

	@Override
	public void receiveNotification(NotificationMessageT messageType,
			INotificationMessage msg) {
		updateCursor();
	}

	private void updateCursor() {
		if(parent ==null || parent.isDisposed())return;
		switch (MouseControlMode.getCurrentMode()) {
		case Seletion:
			if (Syringe.getInstance().isActivated()) {
				if (Syringe.getInstance().getColorCode() == null)
					parent.setCursor(cursorMap.get(CursorT.Syringe));
				else
					parent.setCursor(cursorMap.get(CursorT.Stamp));
			} else
				parent.setCursor(null);
			break;
		case MoveCamera:
			parent.setCursor(cursorMap.get(CursorT.CameraMove));
			break;
		case RotateCamera:
			parent.setCursor(cursorMap.get(CursorT.CameraRotate));
			break;
		default:
			parent.setCursor(null);
		}
	}
}
