package Builder;

import java.util.ArrayList;
import java.util.List;

import Command.LDrawPart;
import Common.Vector3f;
import LDraw.Support.LDrawDirective;
import Notification.NotificationCenter;
import Notification.NotificationMessageT;
import UndoRedo.CopyDirectivesAction;
import UndoRedo.LDrawUndoRedoManager;
import Window.MOCBuilder;

public class CopyNPasteManager {
	private static CopyNPasteManager _instance = null;

	public synchronized static CopyNPasteManager getInstance() {
		if (_instance == null)
			_instance = new CopyNPasteManager();

		return _instance;
	}

	private CopyNPasteManager() {
		copyDirectiveList = new ArrayList<LDrawDirective>();
	}

	private ArrayList<LDrawDirective> copyDirectiveList;

	public void setCopyList(List<LDrawDirective> list) {
		copyDirectiveList.clear();

		for (LDrawDirective part : MOCBuilder.getInstance()
				.getAllPartInActiveModel(false)) {
			if (list.contains(part)) {
				LDrawDirective copy;
				try {
					copy = (LDrawDirective) part.clone();
					copyDirectiveList.add(copy);
				} catch (CloneNotSupportedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}

		DirectiveSelectionManager.getInstance().clearSelection();
		NotificationCenter.getInstance().postNotification(
				NotificationMessageT.CopyNPasteManagerUpdated);
	}

	public void setCutList(List<LDrawDirective> list) {
		copyDirectiveList.clear();
		for (LDrawDirective part : MOCBuilder.getInstance()
				.getAllPartInActiveModel(false)) {
			if (list.contains(part)) {
				LDrawDirective copy;
				try {
					copy = (LDrawDirective) part.clone();
					copyDirectiveList.add(copy);
				} catch (CloneNotSupportedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
		MOCBuilder.getInstance().removeSelectedDirective();
		NotificationCenter.getInstance().postNotification(
				NotificationMessageT.CopyNPasteManagerUpdated);
	}

	public void paste(Vector3f pos) {
		if (copyDirectiveList.size() == 0)
			return;
		DirectiveSelectionManager selectionManager = DirectiveSelectionManager
				.getInstance();
		MOCBuilder builder = MOCBuilder.getInstance();

		selectionManager.clearSelection();
		for (LDrawDirective directive : copyDirectiveList) {
			LDrawDirective copy;
			try {
				copy = (LDrawDirective) directive.clone();
				builder.addDirectiveToWorkingFile(copy);

				selectionManager.addDirectiveToSelection(copy);
			} catch (CloneNotSupportedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		Vector3f posDiff = pos.sub(selectionManager.getSelectedDirectiveCenter());
		LDrawDirective directive = selectionManager.getSelectedDirectiveList()
				.get(0);
		builder.moveDirectiveBy(directive, posDiff);
		selectionManager.moveSelectedDirectiveBy(directive);
		ArrayList<LDrawDirective> directiveList = new ArrayList<LDrawDirective>(
				selectionManager.getSelectedDirectiveList());
		CopyDirectivesAction action = new CopyDirectivesAction(builder,
				directiveList);
		LDrawUndoRedoManager.getInstance().pushUndoAction(action);
	}

	public boolean isEmptyClipboard() {
		return copyDirectiveList.isEmpty();
	}
}
