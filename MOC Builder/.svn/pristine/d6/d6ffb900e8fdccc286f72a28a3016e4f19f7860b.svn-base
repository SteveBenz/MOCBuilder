; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "MOC Builder"
#define MyAppVersion "Public 1.0"
#define MyAppPublisher "Bricklink"
#define MyAppURL "http://www.bricklink.com/"
#define MyAppExeName "mocbuilder.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{FE56D459-4ED5-48B7-825F-D8102246908D}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputDir=J:\MOCBuilder
OutputBaseFilename=MOCBuilder
SetupIconFile=.\MOCBuilder.ico
Compression=lzma
SolidCompression=yes
ArchitecturesAllowed=x86 x64
ArchitecturesInstallIn64BitMode=x64

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Types]
Name: "full"; Description: "Full installation (Include LDraw Parts data)"
Name: "compact"; Description: "Compact installation"

[Components]
Name: "program"; Description: "Program Files"; Types: full compact; Flags: fixed
Name: "data"; Description: "MOCBuilder Data"; Types: full compact; Flags: fixed
Name: "ldraw"; Description: "LDraw Data"; Types: full

[Files]
Source: "J:\MOCBuilder\WIN64\MOCBuilder.exe"; DestDir: "{app}"; Components: program; Flags: ignoreversion; Check: IsX64
Source: "J:\MOCBuilder\WIN32\MOCBuilder.exe"; DestDir: "{app}"; Components: program; Flags: ignoreversion; Check: not IsX64
Source: "..\..\Data\ldraw.xml"; DestDir: "{%HOMEPATH}\{#MyAppName}\Data"; Flags: ignoreversion recursesubdirs createallsubdirs; Components: data                
Source: "..\..\Data\*.js"; DestDir: "{%HOMEPATH}\{#MyAppName}\MappingData"; Flags: ignoreversion recursesubdirs createallsubdirs; Components: data                Source: "..\..\Resource\connectivity\*"; DestDir: "{%HOMEPATH}\{#MyAppName}\Connectivity"; Flags: ignoreversion recursesubdirs createallsubdirs; Components: data

Source: "..\..\Resource\Shader\*"; DestDir: "{app}\Resource\Shader"; Flags: ignoreversion recursesubdirs createallsubdirs; Components: data

Source: "..\..\Licenses\*"; DestDir: "{app}\Licenses"; Flags: ignoreversion recursesubdirs createallsubdirs; Components: data

Source: "C:\ldraw\p\*"; DestDir: "{%HOMEPATH}\{#MyAppName}\ldraw\p"; Flags: onlyifdoesntexist recursesubdirs createallsubdirs; Components: ldraw
Source: "C:\ldraw\parts\*"; DestDir: "{%HOMEPATH}\{#MyAppName}\ldraw\parts"; Flags: onlyifdoesntexist recursesubdirs createallsubdirs; Components: ldraw
Source: "C:\ldraw\ldconfig.ldr"; DestDir: "{%HOMEPATH}\{#MyAppName}\ldraw\"; Flags: onlyifdoesntexist recursesubdirs createallsubdirs; Components: ldraw

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[dirs] 
Name: "{app}"; Permissions: everyone-full; 

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppPublisher}}"; Filename: "{#MyAppURL}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent; Check: IsJREInstalled

[Code]
#define MinJRE "1.6"
#define WebJRE "http://www.oracle.com/technetwork/java/javase/downloads/index.html"
function IsJREInstalled: Boolean;
var
  JREVersion: string;
begin
  // read JRE version
  Result := RegQueryStringValue(HKLM32, 'Software\JavaSoft\Java Runtime Environment',
    'CurrentVersion', JREVersion);
  // if the previous reading failed and we're on 64-bit Windows, try to read 
  // the JRE version from WOW node
  if not Result and IsWin64 then
    Result := RegQueryStringValue(HKLM64, 'Software\JavaSoft\Java Runtime Environment',
      'CurrentVersion', JREVersion);
  // if the JRE version was read, check if it's at least the minimum one
  if Result then
    Result := CompareStr(JREVersion, '{#MinJRE}') >= 0;
end;

function IsX64: Boolean;
var
  JREVersion: string;
begin
  Result := IsWin64;
  if Result then
    begin
      Result := RegQueryStringValue(HKLM64, 'Software\JavaSoft\Java Runtime Environment', 'CurrentVersion', JREVersion);
      if not Result then
        Result := not RegQueryStringValue(HKLM32, 'Software\JavaSoft\Java Runtime Environment', 'CurrentVersion', JREVersion);
    end;
end;

function InitializeSetup: Boolean;
var
  ErrorCode: Integer;
begin
  Result := True;
  // check if JRE is installed; if not, then...
  if not IsJREInstalled then
  begin
    // show a message box and let user to choose if they want to download JRE;
    // if so, go to its download site and exit setup; continue otherwise
    if MsgBox('Java is required. Do you want to download it now ?',
      mbConfirmation, MB_YESNO) = IDYES then
    begin
      ShellExec('', '{#WebJRE}', '', '', SW_SHOWNORMAL, ewNoWait, ErrorCode);
    end;
  end;
end;
